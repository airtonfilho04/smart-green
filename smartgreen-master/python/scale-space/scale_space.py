# -*- coding: utf-8 -*-
'''
Created on 07/07/2013

@author: gustavo
'''

import sys
import math

def filtro(gamma):
    # calcula o raio/largura ideal do filtro
    kernel = []
    w = math.ceil(gamma*4.0)
    l = 1 + 2*int(w)
    
    # calcula o filtro
    soma = 0
    for i in range(0, l):
        sample = math.exp( -0.5*(i-w)*(i-w)/(gamma*gamma) )
        kernel.append(sample)
        soma = soma + sample
    
    # normaliza o filtro
    for i in range(0, l):
        kernel[i] = kernel[i]/soma 
    
    k = (kernel, int(w))
    print(k)
    return k
    
# o problema tá em a
def convolucao(a, kernel, size, W):
    try:
        out = []
        M = size
        
        for i in range(0, size):
            acc = 0.0
            g = kernel
            start =  (i-W)
            
            # beginning
            stop =  max(0, i-W)
            #print 'stop', stop
            x = a[stop]
            j = 0
            while start <= stop:
                acc = acc + g[j]*x
                j = j + 1
                start = start+1
                #print "acc = ",acc
            
            # middle (até o última posicao indexavel)
            stop = min(M-1, i+W)
            #print "stop = ", stop
            while start < stop:
                acc = acc + g[j]* a[start]
                j = j + 1
                start = start+1
            
            # end
            x = a[start]
            #print x
            stop = (i+W)
            while start <= stop:
                acc = acc + g[j]*x
                j = j + 1
                start = start+1
            
            out.append(acc)
        return out
    
    except Exception, err:
        sys.stderr.write('ERROR: %s\n' % str(err))
        return 1
            
def run(amostras, s):
    kernel = filtro(s)
    out = convolucao(amostras, kernel[0], len(amostras), kernel[1])
    return out

# print(filtro(3))
# teste = [13.0433163636364, 12.2105672727273, 11.8202618181818, 11.4474981818182, 11.1887563636364, 11.0104145454545, 10.9431709090909, 10.8306109090909, 18.4496072727273, 13.8419563636364, 10.7063563636364, 10.6990472727273, 10.6581163636364, 10.6347272727273, 10.6537309090909, 10.6084145454545, 10.6625018181818, 10.6142618181818, 10.5981818181818, 10.5967200000000, 10.6522690909091, 35.6712872727273, 11.0747345454545, 11.1117672727273, 11.2345600000000, 10.7516727272727, 10.8379200000000, 10.9256290909091, 10.9943345454545, 11.0191854545455, 11.0908145454545, 11.0148000000000, 11.0528072727273, 11.1039709090909, 11.1522109090909, 11.1829090909091, 11.1858327272727, 11.2004509090909, 11.2121454545455, 11.2399200000000, 11.2866981818182, 11.3451709090909, 11.4124145454545, 11.4928145454545, 11.5220509090909, 11.4928145454545, 11.5585963636364, 11.5644436363636, 11.5702909090909, 11.6609236363636, 11.6813890909091, 11.6404581818182, 11.6273018181818, 11.6755418181818, 11.6726181818182, 11.6989309090909, 11.6755418181818, 11.7018545454545, 11.6463054545455, 11.6521527272727, 11.6477672727273, 11.8378036363636, 11.8685018181818, 11.9796000000000, 12.0132218181818, 12.0921600000000, 12.1813309090909, 12.2295709090909, 12.3596727272727, 12.4108363636364, 12.4663854545455, 12.5804072727273, 12.6534981818182, 12.7148945454545, 12.7952945454545, 12.8786181818182, 12.9692509090909, 13.0540363636364, 13.1154327272727, 12.9794836363636, 12.9941018181818, 12.9093163636364, 12.9224727272727, 13.0087200000000, 13.0262618181818, 13.0467272727273, 13.1022763636364, 13.0861963636364, 13.1899854545455, 13.1958327272727, 13.3697890909091, 13.4808872727273, 13.5349745454545, 13.5729818181818, 18.0461454545455, 14.7102763636364, 14.3375127272727, 14.8725381818182, 15.6896945454545, 16.1779418181818, 16.5448581818182, 20.9429818181818, 21.2665309090909, 21.5783854545455, 21.9272727272727, 22.0169309090909, 22.2313309090909, 22.2859054545455, 22.3404800000000, 22.2761600000000, 22.3502254545455, 22.4086981818182, 22.5275927272727, 22.5061527272727, 22.5646254545455, 22.6269963636364, 22.7205527272727, 22.6581818181818, 22.5529309090909, 22.6757236363636, 23.0704145454545, 23.5235781818182, 17.6782545454545, 17.7757090909091, 18.0836654545455, 18.2434909090909, 18.3740800000000, 18.6372072727273, 18.6761890909091, 18.6294109090909, 18.6411054545455, 18.5436509090909, 18.4949236363636, 18.4598400000000, 18.4754327272727, 18.5378036363636, 18.6060218181818, 18.6586472727273, 18.7424581818182, 18.9880436363636, 18.9685527272727, 18.9373672727273, 18.9393163636364, 19.1946472727273, 19.2453236363636, 19.5864145454546, 19.8768290909091, 20.1068218181818, 20.4518109090909, 20.7363781818182, 21.1106036363636];
# resultado = run(teste, 3)
# print(resultado)
