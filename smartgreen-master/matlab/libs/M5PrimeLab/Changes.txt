ver. 1.7.0
August 5, 2016
* Implemented additional way of computing input variable contributions so that it can be done also in accordance with the Forest Floor methodology.
* Function m5pbuild: output argument ensembleResults new has two additional fields: OOBIndices, OOBContrib.
* Function m5pbuild: input argument keepNodeInfo is now by default true.
* Function m5pparamsensemble: new parameter called getOOBContrib. The order of input arguments has changed.
* Function m5ppredict: the function now checks whether the number of columns in Xq is the same as was in training data.
* Updated examples of usage in Section 3 so that they reflect the new changes and additions.
* Added references to papers about "feature contribution method" and Forest Floor methodology.

ver. 1.6.2
July 28, 2016
* Function m5ppredict: The number of columns for the new contrib argument (introduced in the previous version) now is always equal to the number of columns in Xq plus one, even if the data contains categorical variables with more than two categories (in which case the contributions of the surrogate variables are summed together).
* A few tiny additional source code touch-ups.

ver. 1.6.1
July 28, 2016
* Function m5ppredict now has an additional output argument contrib. This is a matrix of input variable contributions to the response value for each separate row of Xq.
* All functions now have additional checks for correct X,Y argument types.
* Warning messages are now displayed using the warning function instead of disp.
* Bugfix in function m5pplot: Trying to plot a colorized tree containing only one node, resulted in error.
* A few tiny user's manual and source code touch-ups.

ver. 1.6.0
April 14, 2016
* Added a new function: m5pparams2. An alternative to m5pparams for supplying parameters as name/value pairs.
* Added a new function: m5pparamsensemble2. An alternative to m5pparamsensemble for supplying parameters as name/value pairs.
* Function m5pparams: Three new input arguments to allow more configuration flexibility: maxDepth, eliminateTerms, vanillaSDR. The order of arguments has changed.
* Function m5pparams: Changed the default value of parameter smoothingK to 0. This is because good values for this parameter highly depend on the data. Too many users view defaults as universal recommendations.
* Function m5pbuild: If argument keepNodeInfo is true, the function now saves standard deviation values in all nodes for further visualization in plots.
* New argument for function m5pplot: showSD. Set to true to show standard deviations corresponding to each node (available only if m5pbuild saved those values).

ver. 1.5.0
April 7, 2016
* Function m5pout is replaced by two new functions
  * m5pprint - prints trees and decision rule sets.
  * m5pplot - plots trees. Has a new graph layout algorithm and some new styles making the plots nicer.
* Input argument keepInteriorModels of function m5pbuild is renamed to keepNodeInfo. Now it controls not only whether to keep models and reponse values of interior nodes but also whether to keep indices of training observations that reached each node.
* A few user's manual touch-ups.

ver. 1.4.1
November 16, 2015
* A new input argument for m5pbuild: keepInteriorModels. The order of input arguments has changed.
* A few code optimizations and touch-ups in m5pbuild.

ver. 1.4.0
November 2, 2015
* M5PrimeLab now has the ability to produce decision rules. Either directly from one tree or using the M5'Rules method.
  Function m5pparams has a new input argument extractRules for choosing the method.
  The structure of the output argument model of the function m5pbuild now changes depending on the value of extractRules.
* Updated functions m5ppredict and m5pout so that all the functions of M5PrimeLab can handle decision rules.
* Updated example of usage in the user's manual to show the process of decision rule generation.

ver. 1.3.0
October 28, 2015
* M5PrimeLab now has the ability to grow ensembles of trees using Extremely Randomized Trees (a.k.a. Extra-Trees).
  Function m5pparamsensemble has a new input argument: extraTrees. Set to true to use Extra-Trees. See description of the function for recommended settings.
* To provide more flexibility in configuring the tree building process, input argument minNumCases for function m5pparams is replaced with two new arguments: minLeafSize (default = 2) and minParentSize (default = 4). Previous default behaviour is achieved by setting minParentSize to 8 and minLeafSize to 4. Examples in user's manual are updated accordingly.
* A new input argument for function m5pcv: nCross. The order of input arguments has changed.
* Fixed a rare bug introduced in ver. 1.2.1: sometimes smoothing failed with an error message.
* A few code optimizations, vectorizations, and various other minor code updates in function m5pbuild.
* Updated recommendations in user's manual and function descriptions for configuring ensemble methods.
* Updated and corrected descriptions of some input arguments for function m5pparams.
* Various other user's manual touch-ups.

ver. 1.2.1
October 6, 2015
* Function m5pout now has the ability to display how the tree deals with unknown values. To enable, set the new input argument dealWithNaN to true.
* Some code optimizations in functions m5pbuild and m5ppredict.
* In the previous version, the smoothing process was moved from prediction phase (in predictsingle) to building phase (in m5pbuild) but it still could not make smoothed model trees to be able to resolve unknown data values without redoing the smoothing during the prediction. In this version, smoothing in m5pbuild is done for all possible situations. As a result, the data structure for built trees is greatly simplified, computations for prediction are slightly faster, and m5pout can display how a tree deals with missing values even if the tree is a smoothed model tree.
* Reverted the changes from M5PrimeLab version 1.0.1 because Octave already supports all tic/toc use cases.
* For ensembles, m5pbuild now reports OOBNum (number of times observations were out-of-bag).
* More accurate computations in m5ppredict (and therefore in m5ptest and m5pcv) for ensembles.

ver. 1.2.0
September 26, 2015
* M5PrimeLab now has the ability to grow ensembles of trees using Bagging and Random Forests.
  All the functions of M5PrimeLab are updated so that they can handle ensembles (except m5pout).
  A new function for configuring ensembles is added: m5pparamsensemble.
  Functions m5pbuild and m5pcv have additional input argument for configuration of ensembles.
  Function m5pbuild has an additional output argument for results specific to ensembles.
  When ensembles are handled, functions m5pbuild, m5ppredict, m5ptest, and m5pcv change dimensionality of some of their output arguments.
* Overhauled m5ptest and m5pcv to make them more useful and convenient.
  Output argument structure for both functions has changed.
  m5pcv has additional output argument for reporting results on each Cross-Validation fold separately.
  m5ptest and m5pcv now reports MAE.
  m5ptest, and consequently m5pcv, now outputs -Inf instead of Inf for Coefficient of Determination when the number of observations in test data is 1.
  Order of input arguments for m5pcv has changed.
* Input argument binCat for functions m5pbuild and m5pcv is changed to logical isBinCat to simplify indication of binary/categorical variables.
* m5pparams: Removed redundant parameter smoothing and renamed smoothing_k to smoothingK. Smoothing is now by default enabled.
* Smoothing is now done in m5pbuild as a post-processing task (instead of in m5ppredict each time a prediction is asked). As a result prints/plots by m5pout now reflect smoothing. The printed equations now look more complex than before because models from interior nodes are now incorporated in models of leaf nodes (although the actual predictions of the tree have not changed). Disable smoothing if you want to see more interpretable trees.
  Note that m5ppredict still does smoothing from scratch if NaN is encountered.
* Careful study of source code for M5' in Weka revealed a number of differences from Quinlan's and Wang & Witten's papers. The most notable difference is that, at the pruning phase, expected error compensation for a subtree is much more aggressive. M5PrimeLab now has additional parameter in m5pparams called aggressivePruning (false by default) that penalizes subtrees in the same aggressive fashion as Weka's implementation. With this option enabled, the pruned trees are usually much more smaller than those pruned with this option disabled. This can be helpful for interpretation but the trees can also turn out underfitted.
* Updated how function m5pbuild handles missing values so that it is done exactly like in the Wang & Witten's paper. SDR is calculated only using observations for which the value of the splitting attribute is known while observations with unknown values are divided according to observations that are nearest to the split point.
* Dropping of terms in regression models is now done only when pruning is enabled.
* The data structure for built trees is slightly simplified as well as changed to incorporate all the mentioned new stuff.
* m5pout tree plots now look better.
* Added three new private functions in separate .m files used from the main functions.
* Got rid of some unnecessary computations in m5pbuild.
* Various other minor code updates.
* Many documentation updates. Added more information about M5' parameters. Updated the example of usage as well as added a new one for building ensembles.

ver. 1.1.0
July 11, 2015
* m5pout now has the ability to plot the trees.
* Minor clarifications in function descriptions in code and user's manual.
* Slightly expanded section "Example of usage" in user's manual as well as some additional touch-ups in other sections.

ver. 1.0.2
May 16, 2015
* m5pbuild had a nested loop reusing an index variable used by the outer loop. This is essentially just a cosmetic change because this did not influence results in any way.
* Some minor cosmetic changes to the source code according to the "best practices". Some additional code comments.
* Some minor clarifications in function descriptions in code and user's manual.
* Some additional user's manual touch-ups.

ver. 1.0.1
September 3, 2010
* A tiny change so that M5PrimeLab is fully compatible with Octave: "ttt=tic;" is replaced by "tic;" and "time = toc(ttt);" is replaced by "time = toc;" (Thanks to Dr. Julio J. Valdes for reminding me about Octave community.)

ver. 1.0.0
April 9, 2010
* First public release.
